generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  role          String         // "USER", "STORE_OWNER", "ADMIN"
  created_at    DateTime       @default(now())
  stores        store[]
  reviews       review[]
  reports       report[]
  payments      payment[]

  @@map("users")
}

model store {
  id                Int          @id @default(autoincrement())
  user_id           Int
  store_name        String
  category_id       Int
  description       String
  verified          Boolean      @default(false)
  subscription_date DateTime     @default(now())
  user              user         @relation(fields: [user_id], references: [id])
  category          category     @relation(fields: [category_id], references: [id])
  address           address?
  reviews           review[]
  reports           report[]
  payments          payment[]

  @@map("stores")
}

model category {
  id             Int      @id @default(autoincrement())
  category_name  String
  stores         store[]

  @@map("categories")
}

model address {
  id           Int      @id @default(autoincrement())
  store_id     Int      @unique
  street       String
  city         String
  state        String
  postal_code  String
  country      String
  latitude     Float
  longitude    Float
  store        store    @relation(fields: [store_id], references: [id])

  @@map("addresses")
}

model review {
  id          Int      @id @default(autoincrement())
  comment     String
  rating      Int
  created_at  DateTime @default(now())
  user_id     Int
  store_id    Int
  user        user     @relation(fields: [user_id], references: [id])
  store       store    @relation(fields: [store_id], references: [id])

  @@map("reviews")
}

model report {
  id                Int      @id @default(autoincrement())
  report_description String
  report_date       DateTime @default(now())
  status            String
  user_id           Int
  store_id          Int
  user              user     @relation(fields: [user_id], references: [id])
  store             store    @relation(fields: [store_id], references: [id])

  @@map("reports")
}

model payment {
  id            Int      @id @default(autoincrement())
  amount        Float
  payment_date  DateTime @default(now())
  payment_type  String
  payment_status String
  user_id       Int
  store_id      Int
  user          user     @relation(fields: [user_id], references: [id])
  store         store    @relation(fields: [store_id], references: [id])
  invoice       invoice?
  refund        refund?

  @@map("payments")
}

model invoice {
  id             Int      @id @default(autoincrement())
  payment_id     Int      @unique
  issue_date     DateTime @default(now())
  invoice_number String
  total_amount   Float
  status         String
  payment        payment  @relation(fields: [payment_id], references: [id])

  @@map("invoices")
}

model refund {
  id            Int      @id @default(autoincrement())
  payment_id    Int      @unique
  refund_date   DateTime @default(now())
  refund_amount Float
  reason        String
  status        String
  payment       payment  @relation(fields: [payment_id], references: [id])

  @@map("refunds")
}